The Debug pane provides the facilities for setting the debug modes, stepping through a running query, tracing and breaking for user specified predicates, and for declarative debugging, determining how a query was proved.To begin, set the debug mode on by setting the Debugger On check box.  You cannot change the debugging mode during a query.  Complete or terminate the query first.  See the Query Facility section for more information.  With the debug mode on, the next query will permit debugging, and you may use the stepping services described below.Set the Abort On Unknown Predicate check box is you want queries to abort with an error when unknown predicates are called.  This can help track down problems with failing queries resulting from typographical errors in the Prolog source code.  When unset, unkown predicates are equivalent to the fail/0 predicate.On the left of the Debug pane are three facilities, Trace, Proved, and Goal, which let you control which predicates are are interested in, and which let you view the internal state of the prover.  To use one of these facilities click on the corresponding button above the their list, and below the Debugger On check box.  The pane for that facility appears.  You may interact with the pane to complete your task.The Trace pane provides a list of all the predicates in the database.  By default only user predicates are shown.  You can view all predicates, including those built into JLog by clicking the Show All toggle button.  Click the Hide button to toggle back to the user predicate view.  Click the Update button to search the internal database for new predicates.  This could be useful for programs that assert new predicates.From the Trace pane you can set which predicates you are interested in.  To set the Trace or Break status for a predicate, select the predicate in the Predicates list, and click on the Set/Unset Trace or Set/Unset Break buttons.  The predicate entry appears with a T or B in square brackets to reflect its state.  You can clear all trace or break points with the Clear Traces and Clear Breaks buttons respectively.  Setting the Trace All check box, (located near the top of the Debug pane), is equivalent to making every predicate traceable, but much easier.   An attempt to prove a predicate that is set as a trace point, prints out information on that predicates goal, and continues running the program.  An attempt to prove a predicate that is set as a break point, causes the query to stop running, and permit the user to step through the query from that point on as they wish.  If the Break On Fail check box, (located near the top of the Debug pane), is on then if any predicate which is also a trace point cannot be proved, the query stops running and the user can step though as desired.The Proved pane provides a list of all the 'proved' predicates instances.  This is a bit of misnomer since they may or may not be proved.  A predicate instance is proved if all of its sub goals are proved (i.e. they are on the 'proved' list).  The debugger will notify when a trace point predicate instance is really proved (not just in the 'proved' list).  Select a predicate instance and click the Display button to view information about this predicate instance, including its unification state and sub goals.  Predicate instances on the proved and goals list are numbered.  The numbering is only valid while the query is stopped at a break point.  Previously displayed sub goals for a predicate instance may not match with those in the goals list after the program runs or steps through other goals.The Goals pane provides a list of all the predicate instances left to prove.  When this list is empty the query is proved.  Select a predicate instance and click the Display button to view information about that goal.You can do declarative debugging in JLog using the Proved and Goals pane.  To find out more, see the Declarative Debug section.Query stepping is provided through four buttons, Run, Step In, Step Over, and Break.  Click the Run button to run the query at full speed, displaying trace points, and stopping only when a break point is reached.  Click the Step In button to step through the program goal by goal.  After each goal program execution stops and waits for the user.  Click the Step Over button to run all the sub goals for the current predicate instance.  Click the Break button to stop program execution, and give the user control over further stepping.Click the Clear button below the debugging output text area to erase previous debugging information.When debugging, you may have to go to the Query pane to view the output from the query itself, and to retry a query.*NOTE* When a query finds a solution, program execution stops.  Pressing the Run, Step In, or Step Over button permits the query to continue running; however, clicking the Retry button on the Query pane is required to actually make the program run. 