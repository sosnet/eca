JLog is a 'fairly' complete implementation of Prolog.  However there are some discrepancies and some missing features between JLog and other standard Prolog implementations such as YAP and SWI-Prolog.JLog does *not* support any depreciated, obsolete, or unrecommended predicates.JLog does *not* support predicates tied to the runtime system or which don't work in the interactive shell.JLog does *not* support predicates which reveal the inner workings of the predicate database.  In particular, the program modification predicates which return references are *not* supported. JLog does *not* support predicates which reveal the inner state of the prover engine or database.  In particular, listing/1 is not supported.  A list of predicates is available via the 'Listing of Available Predicates' topic in the Help pane (also via the Debug pane).JLog does *not* support any calls to the underlying system, such as unix/1, or plsys/1.In general, JLog does not support predicates that are available from the GUI.JLog does *not* support file, stream or socket based I/O.  It does support write/1, nl/0, read/1 and even a writeln/1 for console I/O.JLog does *not* support user-hook or user-handler predicates.JLog does *not* currently support exceptions.JLog does *not* currently support any of the hyperbolic trigonometric functions, cot/1, msb/1, inf/0, or nan/0.JLog does *not* support profiling predicates.Although JLog does support the Definite Clause Grammer syntax, it uses 'DCGTERMINAL' instead of 'C', and it does *not* support the term_expansion/2 predicate.JLog does *not* support any of the debugging predicates since it already provides GUI debugging tools.JLog does *not* support any of the prolog_flags/3 or prolog_flag/2 predicates.JLog also does *not* support the following predicates: numbervars/3, prompt/2, version/0, version/1.JLog supports almost all operators except for ?-, mode, public, multifile, block, meta_predicate, and ~.  Most are either not appropriate to JLog, or are provided via other services, such as the Query pane.For the sake of performance, some common terms are represented internally in more efficient structures.  Prolog lists in square brackets are not compatible with representations that use the period predicate.  For example, in JLog this is false: [a,b,c] = .(a,.(b,.(c,[]))).  

The default behaviour for missing predicates is to abort (Fail on Unknown Predicate).  However, the failure occurs when attempting to prove the rule containing the unknown predicate (because the rule's body becomes the new goals, and we need to know that the predicate exists to create its goal node).  This may go counter to the expectation that failure will only occur when attempting to call the unknown predicate.