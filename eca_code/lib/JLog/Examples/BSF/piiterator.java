/* Compute pi in a thread */public class piiterator {	Pi p;	int accmax;	public piiterator (int ndigits) {		accmax = ndigits*4 - 100;		// random upper bound on computation		p = new Pi(ndigits);	}	public void calcPi() {		int acc = 0;		while (acc < accmax) {			p.iterate(10);			acc = p.display();			System.out.println("Pi to about " + acc + " digits");		}		p.display();	}	public static void main (String[] args) {		piiterator self;		if ((args == null) || (args.length == 0))			self = new piiterator(100);		else			self = new piiterator(Integer.parseInt(args[0]));		self.calcPi();	}}class ArcTan {	int k, denom2;	Int res, temp1, temp2;		public ArcTan(int ndigits, int denom) {		k = 1;		denom2 = denom*denom;		res = new Int(ndigits);		temp1 = new Int(ndigits);		temp2 = new Int(ndigits);				res.set(1);		res.div(denom);		temp1.set(res);	}		public int accuracy() { return (temp2.leadingZeros()); }		void iterate(int nsteps) {		for (int i=0; i<nsteps; i++) {			if (k > Integer.MAX_VALUE) return;			temp1.div(denom2);			temp2.set(temp1);			temp2.div(2*k + 1);			if ((k % 2) == 1)				res.sub(temp2);			else				res.add(temp2);			k++;		}	}		Int val() { return res; }}class Int {	static final int BASE = 10000;	int nblock, digits[];		public Int(int ndigits) {		digits = new int[ndigits];		nblock = ndigits;	}		public void set(int val) {		for (int i=0; i<nblock; i++)		digits[i] = 0;		digits[0] = val;	}		public void set(Int source) {		System.arraycopy(source.digits, 0, digits, 0, nblock);	}		public boolean zeroP() {		for (int i=0; i<nblock; i++)			if (digits[i] != 0) return false;		return true;	}		public void add(Int increm) {		for (int i=nblock-1; i>=0; i--) {			digits[i] += increm.digits[i];			if (digits[i] >= BASE) {				digits[i] -= BASE;				digits[i-1]++;			}		}	}		public void sub(Int decrem) {		for (int i=nblock-1; i>=0; i--) {			digits[i] -= decrem.digits[i];			if (digits[i] < 0) {				digits[i] += BASE;				digits[i-1] --;			}		}	}		public void mult(int factor) {		int i, carry = 0;		for (i=nblock-1; i>=0; i--) {			digits[i] *= factor;			digits[i] += carry;			carry = digits[i] / BASE;			digits[i] %= BASE;		}	}		public void div(int denom) {		int i, carry = 0;		for (i=0; i<nblock; i++) {			digits[i] += carry*BASE;			carry = digits[i] % denom;			digits[i] /= denom;		}	}		public int leadingZeros() {		int i=0;		while ((digits[i++] == 0) && (i < nblock)) ;		return i-1;	}		public void display(int acc) {		int i, cury = 30;		String curline = digits[0] + ".";			for (i=1; (i<nblock && i<acc); i++) {			curline += digits[i];			if (i%15 == 0) {				System.out.println(curline);				cury += 20;				curline = "";			}		}		System.out.println(curline);	}}class Pi {	ArcTan FirstTerm, SecondTerm;	Int temp1;		public Pi(int ndigits) {		FirstTerm = new ArcTan(ndigits, 5);		SecondTerm = new ArcTan(ndigits, 239);		temp1 = new Int(ndigits);	}		public void iterate(int nsteps) {		FirstTerm.iterate(nsteps);		SecondTerm.iterate(nsteps);	}		public int display() {		int acc = FirstTerm.accuracy();		temp1.set(FirstTerm.val());		temp1.mult(4);		temp1.sub(SecondTerm.val());		temp1.mult(4);		temp1.display(acc);		return acc*4;	}}